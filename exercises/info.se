;; -*- dune -*-

(exercise
 (name let_bindings)
 (path "1.variables/a_let_bindings/a_let_bindings.ml")
 (hint "In OCaml, variable bindings are done using the `let` keyword: `let <variable_name> = <value>`.\n\n\
  For more information on variables, see https://dev.realworldocaml.org/variables-and-functions.html#variables"))

(exercise
 (name type_declarations)
 (path "1.variables/b_type_declarations/b_type_declarations.ml")
 (hint "There are two possibilities to solve this.\n \
  1. Declare the type as a string.\n \
  2. Make `y` a float, for example, 1.0. \n\n\
  For more information on variables, see https://dev.realworldocaml.org/variables-and-functions.html#variables"))

(exercise
 (name type_errors)
 (path "1.variables/c_type_errors/c_type_errors.ml")
 (hint "`+` is an operator that expects two integers. You cannot add an int and a float. \
  As a side-note: for float additions you need `+.`.\n\
  Also, `^` concatenates two strings. Strings are denoted by \"\", whereas '' denotes characters.\n\n\
  For more information on variables, see https://dev.realworldocaml.org/variables-and-functions.html#variables"))

(exercise
 (name type_conversions)
 (path "1.variables/d_type_conversions/d_type_conversions.ml")
 (hint "For basic types, to convert from a type `t` to a type `d`, you can usually use the function `<d>_of_<t>`.\n\n\
  For more information on variables, see https://dev.realworldocaml.org/variables-and-functions.html#variables"))

(exercise
 (name let_in_bindings)
 (path "1.variables/e_let_in_bindings/e_let_in_bindings.ml")
 (hint "The syntax of let bindings inside an expression (for example, a variable deifinition), is `let ... in`; as seen here in line 3.
  Also, note that compiler errors, particularly syntax errors, don't always point to the right line with the error, you might have to look several lines above for the error.\n\n
  For more information on variables, see https://dev.realworldocaml.org/variables-and-functions.html#variables"))

(exercise
 (name local_scoping)
 (path "1.variables/f_local_scoping/f_local_scoping.ml")
 (hint "Bindings defined via the `let ... in` syntax are only defined locally inside the expression they're in. That's called local scoping.
  In this exercise, `pi` needs to be defined globally just the way `radius` is.
  For more information on variables, see https://dev.realworldocaml.org/variables-and-functions.html#variables"))

(exercise
 (name shadowing)
 (path "1.variables/g_shadowing/g_shadowing.ml")
 (hint "Variables are immutable by default, which means that you can't change their value. \
  You can redefine them though. This is done by using the 'let' keyword with the same variable name \
  and is called _shadowing_. \
  Since you are redefining the variable from scratch, you can use a different type.\n\n\
  For more information on variables, see https://dev.realworldocaml.org/variables-and-functions.html#variables"))

(exercise
 (name function_definition)
 (path "2.functions/a_function_definition/a_function_definition.ml")
 (hint "Functions are values in OCaml. So the syntax is similar to the one in the last section; you can see it here in the `add` function. Also, note that compiler errors, particularly syntax errors, don't always point to the right line with the error, you might have to look several lines above for the error.\n\n\
 For more information on functions, see https://dev.realworldocaml.org/variables-and-functions.html#functions"))

(exercise
 (name let_in_bindings)
 (path "2.functions/b_let_in_bindings/b_let_in_bindings.ml")
 (hint "n\n\
 For more information on functions, see https://dev.realworldocaml.org/variables-and-functions.html#functions"))


(exercise
 (name function_call)
 (path "2.functions/c_function_call/c_function_call.ml")
 (hint "The syntax of function calls is the same as the one of function definitions: no brackets, no commas (see definition of value `a`). You will see in the next section why the syntax has to be like that.\n\n\
 For more information on functions, see https://dev.realworldocaml.org/variables-and-functions.html#functions"))

(exercise
 (name currying)
 (path "2.functions/d_currying/d_currying.ml")
 (hint "OCaml is a functional language. One of its functional features is that all functions are curried, which means that you can apply them partially: if you have a function with `n` paramters, you can apply it to the first paramter and get the function that takes the next `n-1` parameters as arguments.\n\n\
 For more information on functions, see https://dev.realworldocaml.org/variables-and-functions.html#functions"))

(exercise
(name labelled_arguments)
 (path "2.functions/e_labelled_arguments/e_labelled_arguments.ml")
 (hint "In OCaml, arguments can be unlabelled (as seen so far) or labelled (as seen in this exercise). Labelled arguments are marked with a `~`
  and can be passed in any order. They are particularly useful in functions with same-typed arguments: if the arguments aren't labelled,
  you might mess up the order in the function call. \n\n\
 For more information on functions, see https://dev.realworldocaml.org/variables-and-functions.html#functions"))

(exercise
 (name optional_arguments)
 (path "2.functions/f_optional_arguments/f_optional_arguments.ml")
 (hint "Functions can have optional arguments, which are marked with a `?`. You can call a function without the optional argument.
  If you want to call the function with the optional argument, you use a `~`, such as `~start:3`.\n\n\
 For more information on functions, see https://dev.realworldocaml.org/variables-and-functions.html#functions"))

(exercise
 (name operators)
 (path "2.functions/g_operators/g_operators.ml")
 (hint "You have already come across different binary operators such as `+`, `+.`, `-`, `^`, etc. In OCaml we can define and redefine binary operators. The syntax is: `let (<operator>) ma b = ...` defines a new binary operator `<operator>`, which can be used as `a <operator> b`.\n\
 The percentage computation can be done as follows: `a /. 100 *. p`\n\n\
 For more information on functions, see https://dev.realworldocaml.org/variables-and-functions.html#functions"))

(exercise
 (name functions_as_parameters)
 (path "2.functions/h_functions_as_parameters/h_functions_as_parameters.ml")
 (hint "\n\n\
 For more information on functions, see https://dev.realworldocaml.org/variables-and-functions.html#functions"))

(exercise
 (name precedence)
 (path "2.functions/i_precedence/i_precedence.ml")
 (hint "\n\n\
 For more information on functions, see https://dev.realworldocaml.org/variables-and-functions.html#functions"))
